snippet main "main"
from collections import *
import sys
try: inp = raw_input
except: inp = input
def err(s):
    sys.stderr.write('{}\n'.format(s))

def ni():
    return int(inp())

def nl():
    return [int(_) for _ in inp().split()]

endsnippet

snippet cj "Google code jam"
from collections import *
import sys
try: inp = raw_input
except: inp = input

def err(s):
    sys.stderr.write('{}\n'.format(s))

def ni():
    return int(inp())

def nl():
    return [int(_) for _ in inp().split()]

def out(t, ans):
    print('Case #{}: {}'.format(t, ans))

T = ni()
for t in range(1, T+1):
    
    out(t, 0)
endsnippet

snippet mir "map int raw"
[int(_) for _ in raw_input().split()]
endsnippet

snippet tc "top coder"
class $1:
    def $2(self, $3):
        $4

if __name__ == '__main__':
    a = $1()
    print(a.$2(XXX))
endsnippet

snippet uf "union find"
class UF:
    def __init__(self, N):
        self.sz = [1]*N
        self.p = [i for i in range(N)]

    def find(self, i):
        while i != self.p[i]:
            i = self.p[i]
        return i

    def union(self, a, b):
        aR, bR = map(self.find, [a, b])
        if aR == bR: return False
        if self.sz[aR] > self.sz[bR]:
            self.p[bR] = aR
            self.sz[aR] += self.sz[bR]
        else:
            self.p[aR] = bR
            self.sz[bR] += self.sz[aR]
        return True

endsnippet

snippet dijk "dijkstra"
def dijk(s, adj):
    from heapq import heappop, heappush
    heap = []
    INF, n = 2**60, len(adj)
    dist = [INF]*n
    def update(v, d):
        if d < dist[v]:
            dist[v] = d
            heappush(heap, (d, v))
    update(s, 0)
    while heap:
        d, u = heappop(heap)
        if d != dist[u]: continue
        for v, c in adj[u]:
            update(v, d + c)
    return dist
endsnippet
